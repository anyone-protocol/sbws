[paths]
datadir = ${sbws_home}/datadir
v3bw_fname = ${sbws_home}/v3bw.txt
started_filepath = ${sbws_home}/started_at

[destinations]
# The path part of the URL for a destination if not specified. For example,
# if defaul_path is /sbws.bin, then the following URLs will be treated the
# same.
# - http://example.com
# - http://example.com/sbws.bin
# Note that "https://example.com/" is not on the list. It's path is "/"
default_path = /sbws.bin
# How often to check if a destional is usable
usability_test_interval = 300

[general]
# Days into the past that measurements are considered valid
data_period = 5
# Timeout in seconds to give to the python Requests library. It MUST be a
# single float. Requests will use it both as the connect() timeout and the
# timeout between bytes received from the server. See
# http://docs.python-requests.org/en/master/user/advanced/#timeouts
http_timeout = 10
# Timeout in seconds for waiting on a circuit to be built. It MUST be an
# **int**. We will use this both as the CircuitBuildTimeout and a timeout
# to give to stem for waiting on a circuit to be built since
# CircuitBuildTimeout doesn't handle the case of a TLS connection to a relay
# taking forever, and probably other not-yet-discovered cases.
circuit_timeout = 10

[scanner]
# A human-readable string with chars in a-zA-Z0-9 to identify your scanner
nickname = IDidntEditTheSBWSConfig
# Limits on what download times are too fast/slow/etc.
download_toofast = 1
download_min = 5
download_target = 6
download_max = 10
# How many RTT measurements to make
num_rtts = 10
# Number of downloads with acceptable times we must have for a relay before
# moving on
num_downloads = 5
# The number of bytes to initially request from the server
initial_read_request = 16384
# How many measurements to make in parallel
measurement_threads = 3
# Minimum number of bytes we should ever try to download in a measurement
min_download_size = 1
# Maximum number of bytes we should ever try to download in a measurement
# 1073741824 == 1 GiB
max_download_size = 1073741824
# Whether or not to measure authorities
measure_authorities = off

[server]
bind_ip = 127.0.0.1
bind_port = 31648
# Maximum number of bytes to write for each sock.send() call
max_send_per_write = 4096

[tor]
datadir = ${paths:sbws_home}/tor
control_socket = ${tor:datadir}/control_socket
log = ${tor:datadir}/log.txt
extra_lines =

[cleanup]
# After this many days, compress data files
stale_days = 10
# After this many days, delete data files
rotten_days = 90

[relayprioritizer]
# Whether or not to measure authorities
measure_authorities = off
# The target fraction of best priority relays we would like to return.
# 0.05 is 5%. In a 7000 relay network, 5% is 350 relays.
#
# In a network of ~6500 relays and with a ResultDump containing 1 result per
# relay, the best_priority() function takes ~11 seconds to complete on my
# home desktop. Using this parameter allows us to balance between calling
# best_priority() more often (but wasting more CPU), and calling it less
# often (but taking longer to get back to relays with non-successful results).
#
# Alternatively, we could rewrite best_priority() to not suck so much.
fraction_relays = 0.05
# The minimum number of best priority relays we are willing to return
min_relays = 50
